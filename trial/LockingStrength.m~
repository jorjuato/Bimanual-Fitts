classdef LockingStrength
    properties
        freqs
        Lf
        Rf
        Rph
        Lph
        LPxx
        LPxx_t
        RPxx
        RPxx_t
        p
        q
        peak_delta=3;
    end % properties
    
    properties (Dependent = true, SetAccess = private)
        flsPC
        flsAmp
        phDiffMean
        phDiffStd
        rho
    end
    
    methods
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Properties getters and setter
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function flsPC = get.flsPC(obj)
            %Compute FLS Pure Coordination
            %with formula from Huys et al. (2004), HMS
            N=sqrt( (obj.rho^2+1) / ((obj.rho+1)*8) );
            flsPC = N * trapz(obj.freqs,obj.RPxx_t.*obj.LPxx) / trapz(obj.freqs,obj.RPxx_t.^2+obj.LPxx.^2);
        end
        
        function flsAmp = get.flsAmp(obj)
            %Compute FLS Amplitude
            %with formula from Huys et al. (2004), HMS
            N=sqrt( (obj.rho^2+1) / ((obj.rho+1)*8) );
            flsAmp = N * trapz(obj.freqs,obj.RPxx_t.*obj.LPxx_t) / trapz(obj.freqs,obj.RPxx_t.^2+obj.LPxx_t.^2);
        end
        
        function phDiffMean = get.phDiffMean(obj)
            [phDiffMean,~]=circstat(obj.q*obj.Rph-obj.p*obj.Lph);
        end
        
        function phDiffStd = get.phDiffStd(obj)
            %Get Kramers-Moyal coefficients
            phDiffStd=circstat(obj.q*obj.Rph-obj.p*obj.Lph);
        end
        
        function rho = get.rho(obj)
            rho = obj.p/obj.q;
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Constructor
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function ls = LockingStrength(ts)
            %_Instantiate local variables from trial structure
            Lx=ts.Lxnorm;
            Rx=ts.Rxnorm;
            ls.Lph=ts.Lph;
            ls.Rph=ts.Rph;
            
            %Compute periodograms
            [ls.LPxx,~] = get_welch_periodogram(Lx);
            [ls.RPxx,ls.freqs] = get_welch_periodogram(Rx);
            
            %Get locking ratio as (p,q) pair, choose ratios
            %bigger than 1 and change arrays names acordingly
            [ls.p, ls.q, ls.Lf, ls.Rf]=get_locking_ratio(ls.LPxx,ls.RPxx,ls.freqs,ls.peak_delta);
            if ls.q>ls.p
                rho=ls.q/ls.p;
                tmp=ls.RPxx;
                ls.RPxx=ls.LPxx;
                ls.LPxx=tmp;
                tmp=Rph;
                Rph=Lph;
                Lph=tmp;
                tmp=ls.Rf;
                ls.Rf=ls.Lf;
                ls.Lf=tmp;
            else
                rho=ls.p/ls.q;
            end
            
            %Rescale the low frequency signal to have a dominant freq equal to the fast
            ls.RPxx_t = get_scaled_PSD(ls.RPxx,f,rho);
            
            %Normalize higher frequency signal to unit variance for FLS Amp
            [Lmax, ~] = peakdet(ls.LPxx,ls.peak_delta);
            if isempty(Lmax)
                ls.LPxx_t = ls.LPxx/max(ls.LPxx);
            else
                ls.LPxx_t = ls.LPxx / Lmax(2);
            end
            
        end
        
        function plot(obj)
            %Check everything goes as expected
            [p, q] = get_locking_ratio(obj.LPxx,obj.RPxx_t,obj.peak_delta);
            figure; hold on
            plot(obj.freqs,obj.LPxx,'r');
            plot(obj.freqs,obj.RPxx_t,'b');
            plot(obj.freqs,obj.RPxx,'g');
            xlim([0,10]);
            text(4,5.5,strcat('Freq locking strength PC=',num2str(obj.flsPC)));
            text(4,5.0,strcat('Freq locking strength Amp=',num2str(obj.flsAmp)));
            text(4,4.5,strcat('Phase locking std=',num2str(obj.phDiffStd)));
            text(4,4.0,strcat('Freq ratio after rescaling=',num2str(obj.p/obj.q)));
            text(4,3.5,strcat('Freq ratio before rescaling=',num2str(obj.rho)));
            hold off;
        end
    end
    
    methods(Static)
    
        function RPxx_t = get_scaled_PSD(RPxx,f,rho)
            %Compute the respective size of complete and fragment signal
            samples=length(f);
            fragment=floor(samples/rho);

            %Some indexes game
            idx=1:fragment;
            idx_t=floor(idx*rho);

            %Create output vector and fetch values from the input one
            RPxx_t=zeros(size(RPxx));
            RPxx_t(idx_t)=RPxx(idx);

            %Interpolate blank frecuencies after rescaling
            blanks=find(RPxx_t == 0);
            blanks_out=interp1(idx_t,RPxx_t(idx_t),blanks);
            blanks_out(isnan(blanks_out))=0;
            RPxx_t(blanks)=blanks_out;
        end

        function [p, q, Lf, Rf] = get_locking_ratio(LPxx,RPxx,freqs,peak_delta)
            if nargin<4, peak_delta=1; end
            %Discover the peaks and obtain a ratio of two natural numbers
            [Lmax, ~] = peakdet(LPxx,peak_delta);
            [Rmax, ~] = peakdet(RPxx,peak_delta);
            if isempty(Lmax) || isempty(Rmax)
                figure; hold on
                plot(freqs,LPxx,'r');
                plot(freqs,RPxx,'g');
                xlim([0,10]);
                hold off;
                p=1;q=1;
            else
                Lf=Lmax(2);
                Rf=Rmax(2);
                [p,q]=rat(freqs(Lmax(1))/freqs(Rmax(1)));
            end
        end

        function [Pxx, f] = get_welch_periodogram(x)
            %Use welch method to compute PSD
            fs=1000;
            factor=floor(length(x)/1050);
            nfft=1024*factor;
            noverlap=nfft/2;
            Hs = [];
            [Pxx,f] = pwelch(x,Hs,noverlap,nfft,fs);
        end
    end
end
