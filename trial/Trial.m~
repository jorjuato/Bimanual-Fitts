classdef Trial < handle
   properties(SetAccess = private)
        ts
        vf
        vfL
        vfR
        osc
        oscL
        oscR
        ls
        info
   end % properties
   
   methods
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %Constructor
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      function obj = Trial(data,name)
          if nargin<2, return; end
          %Call apropiate get_results function, output stored in DS.name
          if findstr(name,'uni')
              if findstr(name,'L')
                  hand=''
              obj.info = get_trial_info_uni(data);
              obj.ts=TimeSeriesUnimanual(data,obj.info);
              obj.osc=Oscillations(obj.ts,'');
              %obj.vf = VectorField();
          else 
              obj.info = get_trial_info_bi(data);
              obj.ts=TimeSeriesBimanual(data,obj.info);
              obj.oscL=Oscillations(obj.ts,'L');
              obj.oscR=Oscillations(obj.ts,'R');
              obj.ls=LockingStrength(obj.ts);
              obj.vfR = VectorField(obj);
              obj.vfL = VectorField(obj);
          end
      end
      
      function plot(obj,graphPath,ext)
        if nargin<3, ext='fig';end
        if nargin<2, graphPath='';end
        
        [fcns, names, xlabels, ylabels] = get_plots();
        %Create figure for this function
        if graphPath
            fig = figure('visible','off');
        else
            fig = figure();
        end
        %Apply plotting methods
        for f=1:length(fcns)
            %Create subplot and call plotting function
            subplot(1,f,f1);           
            fcns{f}(obj);
            ylabel(ylabels{f});
            xlabel(xlabels{f});
        end
        if graphPath
            %Generate random sequence and append to the end (based on seconds or whatever)
            filename = 'TimeSeriesPlot';
            figname = joinpath(graphPath,filename);
            saveas(fig,figname,ext);
            close(fig);
        end
        
        function [fcns, names, xlabels, ylabels] = get_plots(obj)
            idx=[1,2,3,6];
            fcns = {...
                 @plot_time_series...
                ,@plot_phase_plane...
                ,@plot_hook_plane...
                ,@plot_relative_phase...
                ,@plot_relative_phase_hist...
                ,@plot_frequencies...
                ,@plot_tsdiff_hist...
                ,@plot_tsdiff_mixed_distributions...
                ,@plot_spectrogram_computed...
                ,@plot_freq_continous...
                }; fcns=fcns{idx};
            
            names = {...
                'time_series'...
                ,'phase_plane'...
                ,'hook_plane'...
                ,'relative_phase'...
                ,'relative phase histogram'...
                ,'frequencies'...
                ,'histogram of Rx - Lx'...
                ,'triple mixed normal distribution fitting'...
                ,'Spectrogram of combined signals'...
                ,'Instantaneous frequency'...
                }; names=names{idx};
            
            ylabels = {...
                'Position/Speed(m;m/s)'...
                ,'Speed(m/s)'...
                ,'Accel (m/s^2)'...
                ,'Phase Diff (rad)'...
                ,'proportion'...
                ,'Power(dB)'...
                ,'Distance (m)'...
                ,'Distance (m)'...
                ,'Frequency (Hz)'...
                ,'Frequency (Hz)'...
                }; ylabels=ylabels{idx};
            
            xlabels = {...
                'Time (ms)'...
                ,'Position (m)'...
                ,'Position (m)'...
                ,'Time (ms)'...
                ,'Relative Phase (rad)'...
                ,'Frequency (Hz)'...
                ,'Time (ms)'...
                ,'probability'...
                ,'Time (ms)'...
                ,'Time (ms)'...
                }; xlabels=xlabels{idx};
        end
    end
        
        
   end % methods
end% classdef
