
function DS = get_block_vfva(DS,binnumber,neighbourhood,parallelMode)
%%% Stores VFs in DS input data structure
%%% Cannot be used in parallel without ugly trick
    if nargin<4, parallelMode=false; end
    if nargin<3, neighbourhood = [3,3]; end
    %if nargin<2, binnumber=41; end
    if nargin<2, binnumber=31; end
    
    %Unimanual dataset.
    if length(size(DS)) == 2
        DS = get_block_vfva_unimanual(DS,binnumber,neighbourhood);
        return
    %Bimanual parallel version.
    elseif parallelMode
        labsConf = findResource();    
        if labsConf.ClusterSize > 2
            %Distributed version, only if there are more than 2 cores/workers
            DS = get_block_vfva_bimanual_parallel(DS,binnumber,neighbourhood);
            return
        end
    end
    %Bimanual sequencial version.        
    DS = get_block_vfva_bimanual_sequencial(DS,binnumber,neighbourhood);
end

function DS = get_block_vfva_unimanual(DS,binnumber,neighbourhood)
    for i=1:size(DS,1)         
        DS{i,end}.vf = get_vectorfield(DS,i,binnumber);
        DS{i,end}.va = get_vectorangles(DS{i,end}.vf,neighbourhood);
    end     
end

function DS = get_block_vfva_bimanual_sequencial(DS,binnumber,neighbourhood)
    [IDL, IDR, ~ ]  = size(DS);
    for i=1:IDL
        for j=1:IDR            
            DS{i,j,end}.Lvf = get_vectorfield(DS,[i,j],binnumber,'L');
            DS{i,j,end}.Rvf = get_vectorfield(DS,[i,j],binnumber,'R');
            DS{i,j,end}.Lva = get_vectorangles(DS{i,j,end}.Lvf,neighbourhood);
            DS{i,j,end}.Rva = get_vectorangles(DS{i,j,end}.Rvf,neighbourhood);
        end
    end
end

function DS = get_block_vfva_bimanual_parallel(DS,binnumber,neighbourhood)
    [IDL, IDR, ~ ]  = size(DS);
    %Create new pool if needed.
    labsConf = findResource();
    if matlabpool('size') == 0, matlabpool(labsConf.ClusterSize); end
    %Temporal arrays, needed to work with parfor...
    vfL = cell(IDL*IDR);
    vfR = cell(IDL*IDR);
    vaL = cell(IDL*IDR);
    vaR = cell(IDL*IDR);
    P = setprod(1:IDL,1:IDR);   
    parfor idx=1:length(P)
        vfL{idx} = get_vectorfield(DS,P(idx,:),binnumber,'L');
        vfR{idx} = get_vectorfield(DS,P(idx,:),binnumber,'R');
        vaL{idx} = get_vectorangles(vfL{idx},neighbourhood);
        vaR{idx} = get_vectorangles(vfR{idx},neighbourhood);
    end
    %Copy results from temporal arrays to DS output.
    for idx=1:length(P)
        DS{P(idx,1),P(idx,2),end}.Lvf = vfL{idx};
        DS{P(idx,1),P(idx,2),end}.Rvf = vfR{idx};
        DS{P(idx,1),P(idx,2),end}.Lva = vaL{idx};
        DS{P(idx,1),P(idx,2),end}.Rva = vaR{idx};
    end
    clear vfL vfR vaL vaR;
end    
    
